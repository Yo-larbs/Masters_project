---
title: "Plink analysis"
format: html
editor: visual
---

# Plink analysis

## the general structure

For further analysis i decided to use plink, commonly used for GWAS and SNP testing. It requires a VCF containing all the samples you are testing and a phenotype txt to test

The main concern was the VCF for each cell line was separate and i didn't know if it was all headered So if i was to fuse them it wouldn't show up as separate samples within my merged VCF.

The other main concern was my VCF's were a combination of genomic and exomic sequencing. This would greatly affect the results if i just merged them as is . so i decided to trim them

I decided to use nextflow to automate this process

## Merging and reheadering

So to merge i and reheader i used BCF tools to reheader each VCF with the name of the cell line, i first select the sample name by taking out the extension. e.g VOCE_2_ERR18... becomes VOCE_2. After reheadering each file is then compressed into .gz and indexed into .gz.csi

```{groovy}
process REHEADERING {
    tag "${vcf_file.simpleName}"
    publishDir "${params.outdir}/reheadered", mode: 'copy'
    container "${ workflow.containerEngine == 'docker' && !task.ext.singularity_pull_docker_container ?
    'quay.io/biocontainers/bcftools:1.7--0' :
    'biocontainers/bcftools:1.7--0' }"

    input:
        tuple val(fullpath), path(vcf_file)
    output:
        path "reheadered_*.vcf.gz", emit: reheaderedVCFs
        path "reheadered_*.vcf.gz.csi", emit: indexes
    script:

    """

    SampleName=\$(basename "${vcf_file}" | sed -E 's/(\\.filtered\\..*\$|_ERR.*\$)//') #gets rid of the file name at the end
    echo "\$SampleName" > "\${SampleName}.txt"
    
    bcftools reheader -s "\${SampleName}.txt" "./\$(basename ${vcf_file})" -o "reheadered_\${SampleName}.vcf" && echo "work_done"
    rm "\${SampleName}.txt"
    
    bcftools convert -O z -o "reheadered_\${SampleName}.vcf.gz" "reheadered_\${SampleName}.vcf"
    
    bcftools index "reheadered_\${SampleName}.vcf.gz" && rm "reheadered_\${SampleName}.vcf"
    """
}
```

### Merging

after reheadring i then merge each VCF together using bcftools. this makes each cell line a sample within the merged VCF. I have to merge each from both phenotypes (this is for the vector). I also merged and indexed this one

```{groovy}
process MERGE {
    tag "${reheaderedVCF.simpleName}"
    publishDir "${params.outdir}/Merged_genome", mode: 'copy'
    container "${ workflow.containerEngine == 'docker' && !task.ext.singularity_pull_docker_container ?
    'quay.io/biocontainers/bcftools:1.7--0' :
    'biocontainers/bcftools:1.7--0' }"

    input:
        path reheaderedVCF
        path indexes
    output:
        path "merged.vcf.gz", emit: mergedVCF
        path "merged.vcf.gz.csi", emit: indexedmergedVCF
    script:
    """
    bcftools merge $reheaderedVCF  -o "merged.vcf"
    bcftools convert -O z -o  "merged.vcf.gz" "merged.vcf"
    bcftools index  "merged.vcf.gz" && rm "merged.vcf"
    """
}

```

## trimming

I then trimmed the merged VCF, i obtained the BED file of the exome sequences (refgene) from the UCSC genome browser table. after trimming to just the exomic, i sorted the VCF then compressed and indexed it as well

```{groovy}
process TRIMMING{
    tag "${mergedVCF.simpleName}"
    publishDir "${params.outdir}/Filtered_merged_genome", mode: 'copy'
    container "${ workflow.containerEngine == 'docker' && !task.ext.singularity_pull_docker_container ?
    'quay.io/biocontainers/bcftools:1.7--0' :
    'biocontainers/bcftools:1.7--0' }"
    input:
    path bedfile 
    path mergedVCF
    path indexedmergedVCF
    output:
    path "filtered_merged_genome.vcf", emit: filtered_merged
    path "filtered_merged_genome.vcf.gz", emit: filteredmergedVCF
    path "filtered_merged_genome.vcf.gz.csi", emit: indexedmergedVCF

    script:
    """
    bcftools view -R $bedfile $mergedVCF -o "filtered_merged_genome.vcf" && echo work_done
    bcftools sort -o "filtered_merged_genome.vcf" "filtered_merged_genome.vcf"
    bcftools convert -O z -o  "filtered_merged_genome.vcf.gz" "filtered_merged_genome.vcf"
    bcftools index  "filtered_merged_genome.vcf.gz" 
    """
}
```

## running plink

I ran a glm analysis on plink2 , the first script is to produce the needed pgen file, The second script runs the analysis using my phenotype text specifiying the phenotype of each of the cell lines ( will be put on the git hub). You can run it from here

```{bash}
#!/bin/bash
Docker run --platform linux/amd64 -v ..:/data quay.io/biocontainers/plink2:2.00a2.3--hf22980b_0 plink2 --vcf "/data/output/vector/filtered_merged_genome.vcf.gz" --make-pgen --allow-extra-chr --out "/data/output/vector_VCF"
Docker run --platform linux/amd64 -v ..:/data quay.io/biocontainers/plink2:2.00a2.3--hf22980b_0 plink2 --pfile  "/data/output/vector/vector_VCF" --pheno "/data/inputs/vector_phenotype.txt" --glm --allow-extra-chr --pheno-name phenotype --out "/data/output/vector/vector_assoc_results"
```

# plink analysis

```{r}
#install.packages('qqman')
library(ggplot2)
library(qqman)
library(data.table)
```
```{r}
Plink_vector=fread('output/vector_assoc_results.phenotype.glm.logistic')
```

```{r}
Plink_vector=Plink_vector[Plink_vector$POS %in% Susceptible_cells_annovar_csv$Start|Plink_vector$POS %in% Resistant_cells_annovar_csv$Start]

df=distinct(rbind(Resistant_cells_annovar_csv,Susceptible_cells_annovar_csv))
```

```{r}
merged_df = left_join(x = Plink_vector,y = df,by = c("REF" = "Ref", "POS" = "Start","ALT"="Alt"))
merged_df <- merged_df[ !is.na(merged_df$Gene.refGene) & merged_df$ExonicFunc.refGene != "synonymous SNV", ]
merged_df=distinct(merged_df)
Plink_vector_clean=merged_df[!is.na(merged_df$P)]
```

```{r}
Plink_vector_clean=Plink_vector_clean %>% mutate(ID = paste0(`#CHROM`,":",POS))
Plink_vector_for_Manhattan=Plink_vector_clean
Plink_vector_for_Manhattan$`#CHROM`[Plink_vector_for_Manhattan$`#CHROM`=="X"] <- 23
Plink_vector_for_Manhattan$`#CHROM`= as.numeric(Plink_vector_for_Manhattan$`#CHROM`)
Plink_vector_for_Manhattan=Plink_vector_for_Manhattan[!is.na(Plink_vector_for_Manhattan$`#CHROM`)]


manhattan(Plink_vector_for_Manhattan,chr = "#CHROM",bp = "POS",snp ="ID",p = "P" ,col = c("red3","lightblue","yellow4","purple","pink","tan","maroon","black","grey44","turquoise","blue","orange","magenta","brown4","gold","purple4","lightblue4","yellow","green4","navy","grey70","lightgreen","khaki3"),chrlabs = c(1:22,"X"),annotatePval = 0.01,annotateTop = T,suggestiveline = T)
```

```{r}
qq(Plink_vector/$P)
```

```{r}
unique(Plink_vector_for_Manhattan$Gene.refGene[Plink_vector_for_Manhattan$P<0.05 & Plink_vector_for_Manhattan$Z_STAT>0])
```


```{r}

sink("plink_list for permissive_gsa.txt",)

cat(paste(unique(Plink_vector_for_Manhattan$Gene.refGene[Plink_vector_for_Manhattan$P<0.01 & Plink_vector_for_Manhattan$Z_STAT>0]),collapse = '\n')) 
#& #(Plink_vector_for_Manhattan$SIFT_pred=="D"|Plink_vector_for_Manhattan$PROVEAN_pred=="D")]),collapse = '\n'))
sink()
```

```{r}
sink("plink_background_list.txt",)
cat(paste(unique(Plink_vector_for_Manhattan$Gene.refGene),collapse = '\n'))
sink()
```


```{r}
sink("plink_list for resistant_gsa.txt",)
cat(paste(unique(Plink_vector_for_Manhattan$Gene.refGene[Plink_vector_for_Manhattan$P<0.01 & Plink_vector_for_Manhattan$Z_STAT<0]),collapse = '\n')) #& (Plink_vector_for_Manhattan$SIFT_pred=="D"|Plink_vector_for_Manhattan$PROVEAN_pred=="D")]),collapse = '\n'))
sink()
```

